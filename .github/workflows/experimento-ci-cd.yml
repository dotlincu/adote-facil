name: experimento-ci-cd

on:
  pull_request:
    branches:
      - main

jobs:

  unit-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout do código
        uses: actions/checkout@v4

      - name: Instalar dependências do backend
        run: |
          cd backend
          npm install

      - name: Executar testes unitários com Jest
        run: |
          cd backend
          npm test -- --coverage

      - name: Upload relatório de cobertura
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: backend/coverage

  build:
    needs: unit-test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout do código
        uses: actions/checkout@v4

      - name: Configurar Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Configurar Docker QEMU
        uses: docker/setup-qemu-action@v2

      - name: Build das imagens Docker
        run: docker compose build

  up-containers:
    needs: build
    runs-on: ubuntu-latest
    env:
      POSTGRES_DB: adote_facil
      POSTGRES_HOST: adote-facil-postgres
      POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      POSTGRES_PORT: 5432
      POSTGRES_CONTAINER_PORT: 6500
    steps:
      - name: Checkout do código
        uses: actions/checkout@v4

      - name: Criar arquivo .env
        working-directory: ./backend
        run: |
          echo "POSTGRES_DB=${{ env.POSTGRES_DB }}" > .env
          echo "POSTGRES_HOST=${{ env.POSTGRES_HOST }}" >> .env
          echo "POSTGRES_USER=${{ env.POSTGRES_USER }}" >> .env
          echo "POSTGRES_PASSWORD=${{ env.POSTGRES_PASSWORD }}" >> .env
          echo "POSTGRES_PORT=${{ env.POSTGRES_PORT }}" >> .env
          echo "POSTGRES_CONTAINER_PORT=${{ env.POSTGRES_CONTAINER_PORT }}" >> .env

      - name: Subir containers com Docker Compose
        run: |
          docker compose up -d
          sleep 10
          docker compose down

  delivery:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout do código
        uses: actions/checkout@v4

      - name: Gerar arquivo ZIP do projeto completo
        run: zip -r adote-facil-projeto.zip . -x '*.git*' '*.github*' 'node_modules/*'

      - name: Upload do artefato
        uses: actions/upload-artifact@v4
        with:
          name: adote-facil-projeto
          path: adote-facil-projeto.zip

  # Quinto job: Criar release automática incrementando patch
  release:
    needs: delivery
    runs-on: ubuntu-latest
    permissions:
      contents: write # Permissão necessária para criar a release
    steps:
      - name: Checkout do código
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Necessário para obter todas as tags

      - name: Baixar artefato gerado
        uses: actions/download-artifact@v4
        with:
          name: adote-facil-projeto
          path: .

      - name: Descobrir próxima tag
        id: get_tag
        run: |
          last_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          major=$(echo $last_tag | cut -d. -f1 | tr -d v)
          minor=$(echo $last_tag | cut -d. -f2)
          patch=$(echo $last_tag | cut -d. -f3)
          new_patch=$((patch + 1))
          new_tag="v${major}.${minor}.${new_patch}"
          echo "Nova tag: $new_tag"
          echo "tag=$new_tag" >> $GITHUB_OUTPUT

      - name: Criar Release
        uses: ncipollo/release-action@v1.12.0
        with:
          artifacts: "adote-facil-projeto.zip"
          tag: "${{ steps.get_tag.outputs.tag }}"
          name: "Release ${{ steps.get_tag.outputs.tag }}"
          # Gera as notas da release automaticamente com base nos commits
          generateReleaseNotes: trues